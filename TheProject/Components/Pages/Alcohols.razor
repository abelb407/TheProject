@page "/alcohols"


@inject NavigationManager NavigationManager
@inject UserManager<User> userManager
@inject UserProvider UserProvider
@inject IHttpContextAccessor httpContextAccessor
@using TheProject.Context
@using TheProject.Components.Account
@using TheProject.Model
@using Microsoft.AspNetCore.Http @*For retrieving client ID*@
@using Microsoft.AspNetCore.Identity @*For retrieving client ID*@




<h3>Alcohols</h3> @* All text for the topic:*@

<h5> AS LEVEL </h5> @* Help users distinguish between Year 12 and Year 13 topics*@

<p>
    Alcohols are organic compounds containing one or more hydroxyl (-OH) groups attached to a carbon atom.
    They are versatile molecules widely studied in organic chemistry.
</p>

<h2 class="section-title">General Formula</h2>
<p>
    Alcohols follow the general formula <b>C<sub>n</sub>H<sub>2n+1</sub>OH</b>, where <i>n</i> is the number of carbon atoms.
</p>

<h2 class="section-title">Classification of Alcohols</h2>
<ul>
    <li><b>Primary (1°):</b> The -OH group is attached to a carbon atom that is bonded to only one other alkyl group. Example: Ethanol (CH<sub>3</sub>CH<sub>2</sub>OH).</li>
    <li><b>Secondary (2°):</b> The -OH group is attached to a carbon atom bonded to two other alkyl groups. Example: Propan-2-ol (CH<sub>3</sub>CHOHCH<sub>3</sub>).</li>
    <li><b>Tertiary (3°):</b> The -OH group is attached to a carbon atom to three other alkyl groups. Example: 2-methylpropan-2-ol (C(CH<sub>3</sub>)<sub>3</sub>OH).</li>
</ul>

<h2 class="section-title">Physical Properties</h2>
<ul>
    <li><b>Boiling Points:</b> Alcohols have higher boiling points than alkanes due to hydrogen bonding between molecules.</li>
    <li><b>Solubility:</b> Lower alcohols (e.g., methanol, ethanol) are soluble in water because they can form hydrogen bonds with water molecules. Solubility decreases with increasing chain length.</li>
</ul>

<h2 class="section-title">Reactions of Alcohols</h2>
<p>Alcohols undergo several important reactions:</p>
<ol>
    <li>
        <b>Combustion:</b> Alcohols burn in oxygen to produce carbon dioxide and water. Example:
        <code>C<sub>2</sub>H<sub>5</sub>OH + 3O<sub>2</sub> → 2CO<sub>2</sub> + 3H<sub>2</sub>O</code>.
    </li>
    <li>
        <b>Oxidation:</b>
        <ul>
            <li>Primary alcohols oxidize to aldehydes and then to carboxylic acids (e.g., ethanol → ethanoic acid).</li>
            <li>Secondary alcohols oxidize to ketones.</li>
            <li>Tertiary alcohols do not oxidize under normal conditions.</li>
        </ul>
    </li>
    <li><b>Dehydration:</b> Alcohols can lose water to form alkenes in the presence of a concentrated acid (e.g., H<sub>2</sub>SO<sub>4</sub>).</li>
    <li>
        <b>Esterification:</b> Alcohols react with carboxylic acids in the presence of an acid catalyst to form esters. Example:
        <code>CH<sub>3</sub>CH<sub>2</sub>OH + CH<sub>3</sub>COOH → CH<sub>3</sub>COOCH<sub>2</sub>CH<sub>3</sub> + H<sub>2</sub>O</code>.
    </li>
</ol>

<h2 class="section-title">Examples of Alcohols</h2>
<table class="data-table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Formula</th>
            <th>Classification</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Methanol</td>
            <td>CH<sub>3</sub>OH</td>
            <td>Primary</td>
        </tr>
        <tr>
            <td>Ethanol</td>
            <td>CH<sub>3</sub>CH<sub>2</sub>OH</td>
            <td>Primary</td>
        </tr>
        <tr>
            <td>Propan-2-ol</td>
            <td>CH<sub>3</sub>CHOHCH<sub>3</sub></td>
            <td>Secondary</td>
        </tr>
    </tbody>
</table>

<h2 class="section-title">Summary</h2>
<p>
    Alcohols are key compounds in organic chemistry with distinctive physical and chemical properties. Their reactivity and classification make them important in both academic and industrial contexts.
</p>

<h2> Your Points </h2>
<h3> @points </h3> 

<h4>Alcohols: Table Quiz</h4>
<p>Fill in the table below. If you're right, it'll flash GREEN. Can you get it all correct?</p>
<p> Each correct row nets 1 point. Anything incorrect and you will lose 1 point. </p>

<table class="quiz-table">
    <thead>
        <tr>
            <th>Reactant</th>
            <th>Product</th>
            <th>Mechanism</th>
            <th>Conditions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var row in TableRows)
        {
            <tr>
                <td>@row.Reactant</td> @* Users can enter their inputs, and then the inputs are checked*@
                <td><input type="text" @bind="row.UserProduct" style="border-color: @BorderColourGiver(row.UserProduct, row.ActualProduct)" /></td>
                <td><input type="text" @bind="row.UserMechanism" style="border-color: @BorderColourGiver(row.UserMechanism, row.ActualMechanism)" /></td>
                <td><input type="text" @bind="row.UserConditions" style="border-color: @BorderColourGiver(row.UserConditions, row.ActualConditions)" /></td>
            </tr>
        }
    </tbody>
</table>


<br />
@if (hideAnswer == true) // Only show these buttons if the answer table is toggled off
{
    <a class="btn btn-primary text-white bg-dark" @onclick="SeeAnswer"> View Answers </a> @*Button to see answers*@

   <a class="btn btn-primary text-white bg-dark" @onclick="PointSum"> Submit Answers  </a> @* Allow users to gain/lose points *@
}

<br /> 
<br />
@if (hideAnswer == false) @*If the user clicks the button, table with answers appears*@
{

    <table class="quiz-table">
        <thead>
            <tr>
                <th>Reactant</th>
                <th>Product</th>
                <th>Mechanism</th>
                <th>Conditions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var row in TableRows) // Display actual values, can't be typed over
            {
                <tr>
                    <td><input type="text" value="@row.Reactant" readonly /></td>
                    <td><input type="text" value="@row.ActualProduct" readonly /></td>
                    <td><input type="text" value="@row.ActualMechanism" readonly /></td>
                    <td><input type="text" value="@row.ActualConditions" readonly /></td>
                </tr>
            }
        </tbody>
    </table>

    <br />

    <a class="btn btn-primary text-white bg-dark" @onclick="HideAnswer"> Hide Answers! </a> @*Hide table after done viewing*@
}

else
{
    <p> ... </p>
}


<h2> Related Pages </h2> @* Pages which are derivates of/derived from the selected page's topic*@

<a href="/alkenes" class="btn btn-primary text-white bg-dark"> Alkenes  </a>

<a href="/aldehydesketones" class="btn btn-primary text-white bg-dark"> Aldehydes </a> 

<a href="/carboxylicacidsandesters" class="btn btn-primary text-white bg-dark"> Carboxylic Acids </a> 

<a href="/aldehydesketones" class="btn btn-primary text-white bg-dark"> Ketones  </a>

<a href="/carboxylicacidsandesters" class="btn btn-primary text-white bg-dark"> Esters </a> 

@code {


    public string username = "guest";
    public int points;
    public int totalQuestions;
    public bool isLoggedIn = false;
    public bool hideAnswer = true;



    protected override async Task OnInitializedAsync()
    {
        // If the user is logged out they're a guest with nothing
        username = "guest";
        points = 0;
        totalQuestions = 0;


        // If the user is logged in access their details
        var context = httpContextAccessor.HttpContext;

        var currentUser = await userManager.GetUserAsync(context.User);
        if (currentUser != null)
        {
            username = currentUser.UserName;
            points = currentUser.Points;
            totalQuestions = currentUser.totalQuestions;
            isLoggedIn = true;


            // If currentUser is not null, it means that someone is logged in
        }

    }

    private void SeeAnswer() // Either make the table appear, or make it disappear 
    {
        hideAnswer = false;
    } 

    private void HideAnswer()
    {
        hideAnswer = true; 
    }


    // private void CheckAns(string userAnswer, string correctAnswer)
    // {

    //     if (userAnswer == correctAnswer)
    //     {
    //         points++; // Increase points if user is right
    //     }
    //     else
    //     {
    //         points--; // Decrease points if user is wrong
    //     }

    // }

    private List<MechanismQuiz> TableRows = new List<MechanismQuiz>
    {
        new MechanismQuiz { Reactant = "Primary Alcohol", ActualProduct = "Aldehyde", ActualMechanism = "Partial Oxidation", ActualConditions = "Warm Acid, Acidified Potassium Dichromate, Distillation" },
        new MechanismQuiz { Reactant = "Primary Alcohol", ActualProduct = "Carboxylic Acid", ActualMechanism = "Complete Oxidation", ActualConditions = "Warm Acid, Acidified Potassium Dichromate, Reflux" },
        new MechanismQuiz { Reactant = "Secondary Alcohol", ActualProduct = "Ketone", ActualMechanism = "Oxidation", ActualConditions = "Warm Acid, Acidified Potassium Dichromate, Distillation" },
        new MechanismQuiz { Reactant = "Alcohol", ActualProduct = "Alkene", ActualMechanism = "Elimination", ActualConditions = "Strong acid, high temperatures" },
        new MechanismQuiz { Reactant = "Alcohol", ActualProduct = "Ester", ActualMechanism = "Esterification", ActualConditions = "Acid, heat" },
    };

    public class MechanismQuiz // For the data in the mechanisms table, and the user's inputs
    {
        public string Reactant { get; set; }
        public string ActualProduct { get; set; }
        public string ActualMechanism { get; set; }
        public string ActualConditions { get; set; }

        public string UserProduct { get; set; }
        public string UserMechanism { get; set; }
        public string UserConditions { get; set; }
    }


    private async Task UpdatePoints() // Method to update the user's point value for the PointSum method
    {
        var context = httpContextAccessor.HttpContext;
        var currentUser = await userManager.GetUserAsync(context.User);
        if (currentUser != null)
        {
            currentUser.Points = points; // Set the user's points value to the one on the page
            await userManager.UpdateAsync(currentUser); // Update user in the database
        }
    }


    private async void PointSum()
    {
        foreach (var row in TableRows) // Loop through whole table
        { 
            if (row.UserConditions == row.ActualConditions && row.UserProduct == row.ActualProduct && row.UserMechanism == row.ActualMechanism) // Check each column
            {
                points = points + 1; // Add or subtract points depending on answers
            }
            else
            {
                points = points - 1;
            }

            await UpdatePoints(); // Save changes to the points
        }

    }

    private string BorderColourGiver(string userAnswer, string correctAnswer) 
    {
       @if (userAnswer == correctAnswer)
        {
            return "green"; // Green for correct answer
            

        }
        else
        {
            return "red"; // Red for incorrect answer
         
        }


    }
}
