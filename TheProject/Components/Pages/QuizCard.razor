@page "/quizcard"
@using TheProject.Model
@using TheProject.Components
@using static TheProject.Components.Pages.Quiz
@using TheProject.Context
@using TheProject.Components.Account
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject TopicSelectionService TopicService
@inherits QuizCardBase
@inject UserManager<User> userManager
@inject IHttpContextAccessor httpContextAccessor
@inject QuestionProvider QuestionProvider



<h3>Quiz:</h3>

<div class="container">
    <div class="quiz">
        @* Check if questions are available for the selected topic *@
        @if (FilteredQuestions.Count() > 0)
        {
            @* Display the current question if there are questions left *@
            if (questionIndex < FilteredQuestions.Count())
            {
                <div class="app-title">Quiz</div>
                <div class="quiz-header">@FilteredQuestions[questionIndex].Question</div>
                <div class="quiz-body">
                    @foreach (var option in FilteredQuestions[questionIndex].Option)
                    {
                        <OptionCard Option="@option" OnOptionSelected="OptionSelected"></OptionCard>
                    }
                </div>
            }
            else
            {
                @* If there are no more questions, load the results interface *@
                <div class="app-title">RESULTS</div>
                <div class="quiz-header">
                    @(score > (FilteredQuestions.Count() / 2) ? "Nice work!!" : "Try again!")
                </div>
                <div class="quiz-body">
                    <h1>Your score is: @score</h1>
                </div>
                <div class="quiz-floor">
                    <button class="btn restart-btn" @onclick="RestartQuiz">Restart!</button>
                    <button href="/" class="btn next-btn" @onclick="SubmitResults">To Home</button>
                </div>
            }

        }
        else
        {
            <div class="app-title">No questions available for the selected topic.</div>
        }
    </div>
</div>

        

@code {



    public List<Questions> Questions { get; set; } = new List<Questions>();
    private List<Questions> FilteredQuestions { get; set; } = new List<Questions>();

    public int questionIndex = 0;
    public int score = 0;

    private int points;
    private int totalQuestions;

    protected override async Task OnInitializedAsync()
    {
        var context = httpContextAccessor.HttpContext;
        var currentUser = await userManager.GetUserAsync(context.User);

        if (currentUser != null)
        {
            points = currentUser.Points;
            totalQuestions = currentUser.totalQuestions;
        }

        // Load all questions from the provider asynchronously
        Questions = await QuestionProvider.GetQuestionsAsync();

        // Ensure topic is selected before filtering questions
        if (!string.IsNullOrEmpty(TopicService.Topic))
        {
            FilteredQuestions = Questions
                .Where(q => string.Equals(q.Topic, TopicService.Topic, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        else
        {
            FilteredQuestions = new List<Questions>();
        }

        await base.OnInitializedAsync();
    }


    // private void LoadQuestions()
    // {
    //     // Add your questions here
    //     Questions.AddRange(new List<Questions> {
    //         new Questions { Question = "Which group is always found in an alcohol?", Topic = "Alcohols", Option = new List<string> { "Hydroxyl", "Carbonyl", "Nitrile", "Phosphate" }, Answer = "Hydroxyl" },
    //         new Questions { Question = "Which one is organic?", Topic = "Alkanes", Option = new List<string> { "Tin", "Carbon", "Lead", "Platinum" }, Answer = "Carbon" },
    //         new Questions { Question = "Who's the electrophile?", Topic = "Alkenes", Option = new List<string> { "Ammonia", "Hydroxide Ion", "Hydronium Ion", "Cyanide Ion" }, Answer = "Hydronium Ion" },
    //         new Questions { Question = "Which one is aminey?", Topic = "Amines", Option = new List<string> { "Bomb", "Nitrogen", "Propanone", "Sulfur" }, Answer = "Nitrogen" }
    //     });
    // }

    protected void OptionSelected(string option)
    {
        if (FilteredQuestions.Count > questionIndex && option == FilteredQuestions[questionIndex].Answer)
        {
            score++;
         
        }
        questionIndex++;

        }

        protected void RestartQuiz()
        {
            score = 0;
            questionIndex = 0;
        }

    protected async Task SubmitResults()
    {
        points += score;
        totalQuestions += FilteredQuestions.Count;

        var context = httpContextAccessor.HttpContext;
        var currentUser = await userManager.GetUserAsync(context.User);

        if (currentUser != null)
        {
            currentUser.Points = points;
            currentUser.totalQuestions = totalQuestions;

            // Assuming userManager has an UpdateAsync method to save changes
            await userManager.UpdateAsync(currentUser);
        }
    }




  
}
