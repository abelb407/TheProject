@page "/leaderboard"

@using TheProject.Components
@using TheProject.Context
@using TheProject.Migrations
@using TheProject.Model
@inject UserProvider UserProvider

<h3>Leaderboard</h3>

@if (filteredUsers == null)
{
    <p>Loading!</p>
}
else if (filteredUsers.Count == 0)
{
    <p>No users match the search criteria.</p>
}
else
{
    <table class="table table-dark table-striped">
        <thead>
            <tr>
                <th>Rank</th>
                <th>Username</th>
                <th>Points</th>
                <th>Total Questions</th>
            </tr>
        </thead>
        <tbody>
            @for (var i = 0; i < filteredUsers.Count; i++)
            {
                <tr>
                    <td>@(i + 1)</td>
                    <td>@filteredUsers[i].UserName</td>
                    <td>@filteredUsers[i].Points</td>
                    <td>@filteredUsers[i].totalQuestions</td>
                </tr>
            }
        </tbody>
    </table>
}


<div class="mb-3">

    <h4> Search: </h4>
    <input type="text" @bind="searchQuery" class="form-control" placeholder="Search by username..." /> @* User enters what they want to search *@

    <a class="btn btn-primary bg-dark text-light mt-2" @onclick="PerformSearch">Search</a> @* Carry out the search *@

    <a class="btn btn-secondary bg-dark text-light mt-2 ms-2" @onclick="ResetSearch">Reset</a> @* Reset back to default page *@

</div>


@code {
    private List<User> users;
    private List<User> filteredUsers;
    private string searchQuery = "";

    protected override async Task OnInitializedAsync()
    {
        users = await UserProvider.GetUsersOrderedByPointsAsync();
        filteredUsers = users; // Initialize the filtered list
    }


    private void PerformSearch()
    {
        if (!string.IsNullOrWhiteSpace(searchQuery)) // If the query is not blank, filter the users list
        {
            filteredUsers = users
                .Where(u => u.UserName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList(); // List users who fit the criteria 
        }
    }

    private void ResetSearch() // Return to the default leaderboard
    {
        searchQuery = "";
        filteredUsers = users;
    }
}
