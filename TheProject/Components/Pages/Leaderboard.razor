@page "/leaderboard"

@using TheProject.Components
@using TheProject.Context
@using TheProject.Migrations
@using TheProject.Model
@using Microsoft.AspNetCore.Http @*For retrieving client ID*@
@using Microsoft.AspNetCore.Identity @*For retrieving client ID*@
@inject UserProvider UserProvider
@inject NavigationManager NavigationManager
@inject UserManager<User> userManager
@inject IHttpContextAccessor httpContextAccessor


<h3>Leaderboard</h3>


@if( isLoggedIn == true )
{
    


@if (filteredUsers == null)
{
    <p>Loading!</p>
}
else if (filteredUsers.Count == 0)
{
    <p>No users match the search criteria.</p>
}
else
{
    <table class="table table-dark table-striped">
        <thead>
            <tr>
                <th>Rank</th>
                <th>Username</th>
                <th>Points</th>
                <th>Total Questions</th>
            </tr>
        </thead>
        <tbody>
            @for (var i = 0; i < filteredUsers.Count; i++)
            {
                <tr>
                    <td>@(i + 1)</td>
                    <td>@filteredUsers[i].UserName</td>
                    <td>@filteredUsers[i].Points</td>
                    <td>@filteredUsers[i].totalQuestions</td>
                </tr>
            }
        </tbody>
    </table>
}


<div class="mb-3">

    <h4> Search: </h4>
    <input type="text" @bind="searchQuery" class="form-control" placeholder="Search by username..." /> @* User enters what they want to search *@

    <a class="btn btn-primary bg-dark text-light mt-2" @onclick="PerformSearch">Search</a> @* Carry out the search *@

    <a class="btn btn-secondary bg-dark text-light mt-2 ms-2" @onclick="OrderByQuestions"> Order by Total Questions </a> @* Re-order leaderboard to depend on total questions *@

    <a class="btn btn-secondary bg-dark text-light mt-2 ms-2" @onclick="FindRank"> Find My Rank </a> @* Allow users to see their rank *@

    <a class="btn btn-secondary bg-dark text-light mt-2 ms-2" @onclick="ResetSearch">Reset</a> @* Reset back to default page *@

    </div>

}

else
{
    
    <h1> Please sign in to access this page. </h1>

    <a class="btn btn-secondary bg-dark text-light mt-2 ms-2"  href="/account/register" > Register </a> 

    <a class="btn btn-secondary bg-dark text-light mt-2 ms-2" href="/account/login" > Login </a> 


}

@code {
    private List<User> users;
    private List<User> filteredUsers;
    private string searchQuery = "";
    private string username = "";
    private int points;
    private int totalQuestions;
    private bool isLoggedIn = false; 

    protected override async Task OnInitializedAsync()
    {
        users = await UserProvider.GetUsersOrderedByPointsAsync();
        filteredUsers = users; // Initialize the filtered list

        // If the user is logged in access their details
        var context = httpContextAccessor.HttpContext;

        var currentUser = await userManager.GetUserAsync(context.User);
        if (currentUser != null)
        {
            username = currentUser.UserName;
            points = currentUser.Points;
            totalQuestions = currentUser.totalQuestions;
            isLoggedIn = true;
            // If currentUser is not null, it means that someone is logged in
        }
    }


    private void OrderByQuestions() // Take the existing list of users, sort this to be in question answered order
    {
        filteredUsers = users
                 .OrderByDescending(u => u.totalQuestions)
                .ToList();
    }

    private void PerformSearch()
    {
        if (!string.IsNullOrWhiteSpace(searchQuery)) // If the query is not blank, filter the users list
        {
            filteredUsers = users
                .Where(u => u.UserName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList(); // List users who fit the criteria 
        }
    }

    private void FindRank()
    {
        filteredUsers = users // Only show the current user so they can see their info 
        .Where(u => u.UserName == username)
        .ToList(); 

    }

    private void ResetSearch() // Return to the default leaderboard
    {
        searchQuery = "";
        filteredUsers = users;
    }
}
