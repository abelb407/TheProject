@page "/update"
@inject NavigationManager NavigationManager
@inject UserManager<User> userManager
@inject UserProvider UserProvider
@inject IHttpContextAccessor httpContextAccessor
@using TheProject.Components
@using TheProject.Model
@using TheProject.Context
@using Microsoft.AspNetCore.Http @*For retrieving client ID*@
@using Microsoft.AspNetCore.Identity @*For retrieving client ID*@

<h3>Update Account Details</h3>

<EditForm Model="currentUserDetails" OnInvalidSubmit="UpdateAccount"> 
    <DataAnnotationsValidator /> 
    <ValidationSummary />

    <div>
        <label for="username">Username:</label>
        <InputText id="username" @bind-Value="currentUserDetails.UserName" class="form-control" />
    </div>
    <div>
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="currentUserDetails.Email" class="form-control" />
    </div>

    <div>
        <label for="school">School:</label>
        <InputText id="school" @bind-Value="currentUserDetails.School" class="form-control" />
    </div>

    <div>
        <label for="points">Points:</label>
        <InputNumber id="points" @bind-Value="currentUserDetails.Points" class="form-control" readonly />
    </div>

    <div>
        <label for="totalQuestions">Total Questions:</label>
        <InputNumber id="totalQuestions" @bind-Value="currentUserDetails.totalQuestions" class="form-control" readonly />
    </div>
    <br />
    <button type="submit" class="btn btn-primary bg-dark text-white">Update</button>



</EditForm>





@code {
    private User currentUserDetails = new User();
    private bool updateSuccessful = false;
    private bool updateFailed = false;

    protected override async Task OnInitializedAsync()
    {
            var context = httpContextAccessor.HttpContext;

            // Get the current user from the user manager
            var currentUser = await userManager.GetUserAsync(context.User);
            if (currentUser != null)
            {
                // Populate currentUserDetails with data from the current user
                currentUserDetails.UserName = currentUser.UserName;
                currentUserDetails.Email = currentUser.Email;
                currentUserDetails.School = currentUser.School;
                currentUserDetails.Points = currentUser.Points;
                currentUserDetails.totalQuestions = currentUser.totalQuestions;
            }
        
     
    }

    private async Task UpdateAccount()
    {
      
            var context = httpContextAccessor.HttpContext;

            // Get the current user and update their details
            var currentUser = await userManager.GetUserAsync(context.User);
            if (currentUser != null)
            {
                currentUser.UserName = currentUserDetails.UserName;
                currentUser.Email = currentUserDetails.Email;
                currentUser.School = currentUserDetails.School;
                currentUser.Points = currentUserDetails.Points;
                currentUser.totalQuestions = currentUserDetails.totalQuestions;

                var result = await userManager.UpdateAsync(currentUser);
                updateSuccessful = result.Succeeded;
                updateFailed = !result.Succeeded;
            }
        
        
    }
}

